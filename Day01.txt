1. Spring Framework
    - Framework 개념
    (1) 틀이나 골격을 의미
    (2) Framework 등장 전에는 모든 개발자들이 각자의 스타일대로 개발하기 때문에 소스코드의 구조나 형식이 일정하지 않아 
    소스코드의 통합이나 유지보수가 매우 어려웠음. 
    Framework는 개발자들이 공통된 틀에 공통된 구조와 형식을 가지고 개발할 수 있도록 기본적인 웹 개발 틀을 제공

2. Spring Framework의 장점
    - 구조와 골격을 제공하기 때문에 개발자들은 오로지 비즈니스 로직만 구현하면 되기 때문에 빠르게 구현 가능
    - Framework로 구현된 웹 어플리케이션들은 거의 구조가 비슷하기 때문에 관리와 유지보수가 용이

3. Spring Framework 특징
    - AOP(Aspect Oriented Programming) : 관점지향 프로그래밍
                                         개발자 A ----> 업무 A
                                         개발자 B ----> 업무 B
                                         개발자 C ----> 업무 C
                                         업무 A, B, C를 개발할 때 공통적으로 들어가는 소스코드들(log, 트랜잭션처리 등)은 Spring에서 관리
                                         개발자 A, B, C는 공통적인 소스코드는 신경 쓸 필요 없음
                                         공통적인 소스코드는 횡단관심이라고 부르며, Spring 설정파일에서 관리
    - 컨테이너 기반 언어
      Spring안의 컨테이너들은 설정파일을 읽어 객체의 생성 및 소멸 등 생명주기를 관리하며 Framework가 동작하도록 만듦
    - IOC(Inversion Of Control) 컨테이너
      (1) 제어의 역전 : 개발자가 제어하던 것들을 Framework가 대신 해주는 것을 의미
      (2) 스프링에서는 설정파일로 객체 생성
      (3) DL(Depency Lookup) : 설정파일을 객체의 생성과 소멸을 관리해주는 bean이나 어노테이션을 이용하여 설정 
                               ex)controller
      (4) DI(Depency Injection) : 의존성 주입은 생성된 객체에 형태가 알맞는 객체를 넣어주는 것을 의미
                                  Spring 설정파일로 개발자가 직접 의존성을 주입하는 것이 아닌 Framework에서 자동으로 주입하도록 설정
                                  setter, 생성자, 어노테이션 이용 
                                  ex)Autowired, Qualifier

4. JSP/Servlet
    - JSP(Java Server Page) : HTML 문서에서 자바소스를 사용하기 위해 개발된 기술
                              JSP도 Servlet을 상속받아 생성되기 때문에 WAS에서 클래스로 컴파일 된 후 동작 
                              이전에는 모든 처리를 JSP에서 했지만, 현재는 화면단(뷰)만 담당하도록 구현
                              백엔드 언어라고 볼 수 있고 화면단만 담당하기 때문에 프론트엔드 언어라고도 볼 수 있다
    - Servlet : 자바 소스코드에서 HTML 태그를 사용하기 위해 개발된 기술 
                서블릿은 점점 백엔드 쪽으로 발전된 상태, 현재는 사용자의 요청을 받는 Request, 응답을 Response 등을 처리하도록 발전
                요청과 요청에 대한 응답은 무조건 서블릿을 통해서 진행

5. WEB 서버와 WAS
    - 웹의 기본 구조
      사용자 ---> 요청 ---> WEB 서버에 먼저 들어옴
            <--- 응답 --- WEB 서버에서 직접 처리 가능한 작업은 바로 응답
      사용자 --- 요청 ---> WEB 서버 처리 불가능 ---> 요청 ---> WAS
      사용자 <--- 응답 <--- WEB 서버를 통해 돌아감 <--- 응답 <--- WAS
    - WEB 서버 : 사용자로부터 요청을 받아드리고 사용자에게 응답을 전달해주는 서버
                 정적인 리소스들 (html, css, image 등) 관리
          종류 : apache, webtob, ngix ...     
    - WAS(Web Application Server) : 실질적으로 웹 어플리케이션을 구동해주는 서버
                                    동적인 리소스들 관리 (JSP, Class, Xml 등)
                                    사용자가 WEB 서버에서 직접 처리할 수 없는 요청 (ex: DB 데이터 조회)를 할 경우, WAS에서 해당 Class의 메소드를 실행시켜서 응답을 WEB 서버로 전달
                             종류 : tomcat, jeus, Web Logic ...

6. GET / POST
    - GET : (1) a태그 link 클릭 시
            (2) 주소창에 주소를 직접 입력할 때
            (3) form태그의 method가 get으로 설정됐을 때
            (4) 비동기 통신(AJAX) 방식을 get으로 설정했을 때
            GET 방식으로 요청을 보냄
            GET 방식으로 요청 시 파라미터가 주소에 표출 됨 (쿼리스트링)
    - POST : form태그의 method가 post일 때만 POST 방식으로 요청
             POST 방식은 파라미터가 표출 안됨
    - GET, POST 모두 파라미터를 넘길 때는 key = value로 매핑해서 넘겨줌
     